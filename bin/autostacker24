#!/usr/bin/env ruby

require 'optparse'
require 'autostacker24'
require 'yaml'

def error(msg)
  puts "\nError: #{msg}\n\n#{USAGE}"
  exit 1
end

def check_template(args)
  error('--template missing or file not found') unless args.template && File.exists?(args.template)
end

def check_stack(args)
  error('--stack name missing') unless args.stack
end

args = OpenStruct.new
args.region = ENV['AWS_REGION']
args.params = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: autostacker24 command [options]'
  opts.separator ''
  opts.separator 'Commands:'
  opts.separator "\tupdate\t\t create or update a stack"
  opts.separator "\tdelete\t\t delete a stack"
  opts.separator "\tprocess\t\t pretty print processed template"
  opts.separator "\tvalidate\t validate the template"
  opts.separator "\tconvert\t\t convert template to and from YAML"
  opts.separator ''
  opts.separator 'Options:'
  opts.on('--template TEMPLATE', 'Path to template')                {|v| args.template = v}
  opts.on('--stack STACK',       'Name of stack')                   {|v| args.stack = v}
  opts.on('--parent PARENT',     'Name of parent stack')            {|v| args.parent = v}
  opts.on('--region REGION',     'AWS region')                      {|v| args.region = v}
  opts.on('--profile PROFILE',   'AWS profile (use aws configure)') {|v| args.profile = v}
  opts.on('--param KEY=VALUE',   'Stack Parameter')                 {|v| args.params.store(*v.split('=')) }
  opts.on('--help',              'Show this help')                  {|_| puts opts; exit!;}
  opts.on('--version',           'Show version')                    {|_| puts `gem list autostacker24`; exit!;}
  opts.separator ''
end
USAGE = parser.to_s

begin
  parser.parse!(ARGV)
rescue OptionParser::ParseError => x
  error(x)
end

error("one command expected, found #{ARGV.size}") if ARGV.size != 1
args.command = ARGV[0]
args.params = args.params.inject({}){|m, kv| m.merge(Hash[kv[0].to_sym, kv[1]])}

Stacker.region = args.region
Stacker.credentials = Aws::SharedCredentials.new(profile_name: args.profile) if args.profile

case args.command
  when /validate/
    check_template(args)
    Stacker.validate_template(args.template)
  when /create|update|create_or_update/
    check_template(args)
    check_stack(args)
    Stacker.create_or_update_stack(args.stack, args.template, args.params, args.parent)
  when /delete/
    check_stack(args)
    Stacker.delete_stack(args.stack)
  when /process|show/
    check_template(args)
    puts JSON.pretty_generate(JSON.parse(Stacker.template_body(args.template)))
  when /convert/
    check_template(args)
    template = File.read(args.template)
    if template =~ /\A(\s*\{)|(\s*\/{2})/
      puts '// AutoStacker24 CloudFormation JSON Template '
      puts JSON.pretty_generate(YAML.load(template))
    else
      puts JSON.parse(template).to_yaml.sub('---', '# AutoStacker24 CloudFormation YAML Template')
    end
  else
    error("unknown command '#{args.command}'")
end

